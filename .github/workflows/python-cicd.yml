name: Python Continuous Integration

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
        poetry-version: ["1.3.2"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - if: matrix.os == 'macOS-latest'
        run: |
          brew install md5sha1sum
          brew install docker
      - if: matrix.os == 'windows-latest'
        run: choco install docker
      - if: matrix.os == 'ubuntu-latest'
        run: |
          # sudo apt-get update && sudo apt-get upgrade
          # sudo apt-get remove docker docker-engine docker.io containerd runc
          # curl -fsSL https://get.docker.com -o get-docker.sh
          # sudo sh get-docker.sh
          # sudo rm get-docker.sh
      - name: 'Create env file'
        env:
          ENVIRONMENT: development
          DEV_ENV_FILE: ${{ secrets.DEV_ENV_FILE }}
        run: |
          echo ${{ secrets.DEV_ENV_FILE }} > .dev.env
      
      # - name: Upgrade pip
      #   run: python -m pip install --upgrade pip
      
      # - name: Install poetry
      #   run: python -m pip install poetry==${{ matrix.poetry-version }}
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # cache: "poetry"
      # - name: Install CICD Dependencies
      #   run: poetry install --without dev,prod
      # - name: Run black formatter
      #   uses: psf/black@stable
      #   with:
      #     options: "--check --verbose --color"
      # - name: Run shellcheck
      #   uses: ludeeus/action-shellcheck@master
      # - name: Run mypy
      #   run: poetry run mypy ichrisbirch --install-types --non-interactive --config-file pyproject.toml
      # - name: Run flake8
      #   run: poetry run flake8 .
      #   # continue-on-error: true
      # - name: Run isort action
      #   uses: isort/isort-action@master
      # # - run: isort . --check
      # - name: Run iterrogate
      #   run: poetry run interrogate -c pyproject.toml
      # - name: Run bandit
      #   run: poetry run bandit -c pyproject.toml -r .
      - name: Run coverage
        run: |
          python -m pip install pytest coverage docker fastapi
          coverage run -m pytest discover
          coverage report -m --fail-under=25
          # poetry run coverage run -m pytest discover
          # poetry run coverage report -m --fail-under=25
