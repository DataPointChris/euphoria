name: Python Continuous Integration

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  ENVIRONMENT: "testing"

jobs:
  validate:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macOS-latest]
        python-version: ["3.10"]
        poetry-version: ["1.3.2"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: MacOS brew installs
        if: matrix.os == 'macOS-latest'
        run: |
          brew install git-secret md5sha1sum 

      - name: MacOS start Docker
        if: matrix.os == 'macOS-latest'
        run: |
            brew install --cask docker
            /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
            open -a /Applications/Docker.app --args --unattended --accept-license
            echo "We are waiting for Docker to be up and running. It can take over 2 minutes..."
            while ! /Applications/Docker.app/Contents/Resources/bin/docker info &>/dev/null; do sleep 1; done
            shell: /bin/bash -e {0}

      - name: Ubuntu installs
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install git-secret

      - name: "git-secret Reveal .env files"
        run: |
          # Import private key and avoid the "Inappropriate ioctl for device" error
          echo ${{ secrets.CICD_GPG_KEY }} | tr ',' '\n' | gpg --batch --yes --pinentry-mode loopback --import
          git secret reveal

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install poetry
        run: python -m pip install poetry==${{ matrix.poetry-version }}

      - name: Poetry install CICD Dependencies
        run: poetry install --without dev,prod

      # - name: Run black formatter
      #   uses: psf/black@stable
      #   with:
      #     options: "--check --verbose --color"

      # - name: Run shellcheck
      #   uses: ludeeus/action-shellcheck@master

      # - name: Run mypy
      #   run: poetry run mypy ichrisbirch --install-types --non-interactive --config-file pyproject.toml

      # - name: Run flake8
      #   run: poetry run flake8 .

      # - name: Run isort action
      #   uses: isort/isort-action@master

      # - name: Run iterrogate
      #   run: poetry run interrogate -c pyproject.toml

      # - name: Run bandit
      #   run: poetry run bandit -c pyproject.toml -r .

      - name: Run pytest coverage
        run: |
          poetry run pytest --cov=ichrisbirch
