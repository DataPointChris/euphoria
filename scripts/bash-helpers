#!/usr/bin/env bash
#
######################################################################
# BASH HELPERS
######################################################################

#-------------------- COLORS --------------------#
color_black() {
    local color
    color=$(tput setaf 0)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_red() {
    local color
    color=$(tput setaf 1)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_green() {
    local color
    color=$(tput setaf 2)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_yellow() {
    local color
    color=$(tput setaf 3)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_blue() {
    local color
    color=$(tput setaf 4)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_magenta() {
    local color
    color=$(tput setaf 5)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_cyan() {
    local color
    color=$(tput setaf 6)
    local msg="${color}$1${normal}"
    echo "$msg"
}

color_white() {
    local color
    color=$(tput setaf 7)
    local msg="${color}$1${normal}"
    echo "$msg"
}

#-------------------- FORMATTERS --------------------#

bold=$(tput bold)
underline=$(tput smul)
normal=$(tput sgr0)

print_section() { echo "${underline}        $1          ${normal}"; }

center_text() { printf "%*s\n" $((($(tput cols) + ${#1}) / 2)) "$1"; }

section_separater() { printf "${underline}%0$(tput cols)d${normal}\n\n" 0 | tr '0' " "; }

terminal_width_separator() { printf "%0$(tput cols)d" 0 | tr '0' "${1:-_}"; }

print_title() {
    local message=$(
        cat <<-TITLE

		$(terminal_width_separator "=")
		$(center_text "$(color_green "$1")")
		$(terminal_width_separator "-")
	TITLE
    )
    echo "$message"
    echo
}


filename_to_title() {
    if [[ -z "$1" ]]; then exit 0; fi
    IFS=' ' read -r -a no_hyphen <<<"${@//-/ }"
    set "${no_hyphen[@],,}"
    set "${@,,}"
    set "${@^}"
    for f in "${@}"; do
        case $f in A | The | Is | Of | And | Or | But | About | To | In | By | For | With)
            echo -n "${f,,} "
            ;;
        *) echo -n "$f " ;;
        esac
    done
    echo
}

#-------------------- Notifications --------------------#

notify_create() { yellow "Create:${normal} $1"; }
notify_update() { green "Update:${normal} $1 $(green " --> ${normal} $2")"; }
notify_copy() { green "Copy:${normal} $1 $(green " --> ${normal} $2")"; }
notify_symlink() { magenta "Symlink:${normal} $1 $(magenta " --> ${normal} $2")"; }
notify_error() { red "${bold}ERROR:${normal} $(red "$1")"; }

# print a repeated character certain number of times
character_repeat() {
    local char="${1:=_}"      # default to underscore
    local num_chars="${2:=5}" # default to 5
    printf "%0${num_chars}d" 0 | tr '0' "$char"

}

rainbow() {
    local black=$(tput setaf 0)
    local red=$(tput setaf 1)
    local green=$(tput setaf 2)
    local yellow=$(tput setaf 3)
    local blue=$(tput setaf 4)
    local magenta=$(tput setaf 5)
    local cyan=$(tput setaf 6)
    local white=$(tput setaf 7)
    local colors=("$black" "$red" "$green" "$yellow" "$blue" "$magenta" "$cyan" "$white")

    if [ -n "$1" ]; then
        local sep="$1"
        local sep2="$1"
    else
        local sep="*"
        local sep2="*"
    fi

    if [ -n "$2" ]; then
        local num_chars="$2"
    else
        local num_chars=5
    fi
    for ((i = 0; i < num_chars; i++)); do
        rand_color_idx=$((RANDOM % ${#colors[@]}))
        rand_color=${colors[$rand_color_idx]}
        sep="$sep$rand_color$sep2"
    done
    sep="$sep${normal}"
    echo "$sep"
}

#------------------------------ SCRIPT HELPER  ------------------------------#
yell() {
    echo "$0: $*" >&2
}

die() {
    yell "$*"
    exit 1
}

try() {
    "$@" || die "cannot $*"
}

# ----- Logging and Output ----- #

err() {
    echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}
# if ! do_something; then
#   err "Unable to do_something"
#   exit 1
# fi
