#!/usr/bin/env bash

######################################################################
# Create a Release
######################################################################

# Fail script on command fail
set -e

# Include the bash helpers for color and formatting
# shellcheck source=./bash-helpers
source scripts/bash-helpers

SCRIPT_NAME=$(basename "$0")
SCRIPT_TITLE="$(filename_to_title "$SCRIPT_NAME")"
export ENVIRONMENT='development' # pytest needs this to run and will only ever be run in DEV environment

# ----------------- Script Functions ----------------- #

usage() {
    local message
    message=$(
        cat <<-EOF

$(green "Usage:")
$(blue "Command Line with Arguments:")
./$SCRIPT_NAME 0.5.2 'Add API Endpoint'

$(blue "Interactive:")
./$SCRIPT_NAME --interactive

$(blue "Help:")
./$SCRIPT_NAME --help

$(blue "Dry Run:")
./$SCRIPT_NAME --dry-run 0.5.2 'Add API Endpoint'
EOF
    )
    echo "$message"
}

help() {
    local message
    message=$(
        cat <<-EOF
$(usage)

$(green "Script Actions")
Create directory '{project}/stats/{version}'
Update 'pyproject.toml'
Update '{project}/__init__.py'
Run pytest and create coverage report
Run tokei and create lines of code report
Run wily and create code complexity report
Create a git tag on master using the version
Push all changes

$(green "Dependencies:")
tokei
wily
EOF
    )
    echo "$message"
}

interactive() {
    echo "Release version:"
    read -r VERSION
    echo "Version description: "
    read -r VERSION_DESCRIPTION
}

# ----------------- Script Pre-Processing ----------------- #

# Get project name from current dir
PROJECT=$(basename "$PWD")
CURRENT_VERSION=$(grep --only-matching "\d.\d.\d" "$PROJECT/__init__.py")

# -- Check for arguments -- #

# 1. If no arguments: show usage, no error
if [[ -z "$1" ]]; then
    usage
    exit 0

# 2. Check for help or interactive flags
elif [[ "$1" = "--help" ]]; then
    shift
    help "$@"
    exit 0

elif [[ "$1" = "--interactive" ]]; then
    interactive

elif [[ "$1" = "--dry-run" ]]; then
    if [[ -z "$2" ]] || [[ -z "$3" ]]; then
        notify_error "Version and Version Description required for --dry-run"
        usage
        exit 1
    fi
    print_title "$(blue "Executing Dry Run of $SCRIPT_TITLE")"
    DRY_RUN=true
    # SEMVER format: X.X.X
    SEMVER=$2
    VERSION="v$SEMVER"
    VERSION_DESCRIPTION=$3
    VERSION_STATS_DIR="$PROJECT/stats/$VERSION"

# 3. Error if version and description not both supplied
elif [[ -z "$1" ]] || [[ -z "$2" ]]; then
    notify_error "Incorrect arguments"
    usage
    exit 1

# 4. Assign version and description
else
    # SEMVER format: X.X.X
    SEMVER=$1
    VERSION="v$SEMVER"
    VERSION_DESCRIPTION=$2
    VERSION_STATS_DIR="$PROJECT/stats/$VERSION"
fi

#-------------------- Functions for Release --------------------#

check_and_start_docker() {
    if pgrep -x "docker" >/dev/null; then
        echo "Docker is running"
    else
        echo "Docker is not running, starting..."
        open -ga "Docker Desktop"
        sleep 30
        echo "Docker started"
    fi
}

run_coverage_report() {
    coverage run --module pytest
    coverage report -m >"$VERSION_STATS_DIR/coverage.txt"
    coverage json -o "$VERSION_STATS_DIR/coverage.json"
    coverage html -d "$VERSION_STATS_DIR/coverage_html/"
}

tokei_lines_of_code_report() {
    tokei . --exclude .venv --exclude "$PROJECT"/backend/alembic/versions/ >"$VERSION_STATS_DIR"/lines_of_code.txt
    tokei . --exclude .venv --exclude "$PROJECT"/backend/alembic/versions/ -o json >"$VERSION_STATS_DIR"/lines_of_code.json

}

# wily does not have json output at the moment
wily_code_complexity_report() {
    wily build .
    wily diff . -r master >"$VERSION_STATS_DIR"/complexity.txt
}

update_poetry_version() {
    poetry version "$SEMVER"
}

update_project_version() {
    local original_file="$PROJECT/__init__.py"
    local tmp_file="$PROJECT/__init__.py.tmp"
    sed -E "s/[0-9]+(\.[0-9]+)*/$SEMVER/" "$original_file" >"$tmp_file"
    mv -f "$tmp_file" "$original_file"
}

git_add_and_commit_version_stats() {
    git add -A
    git commit -m "release: $VERSION - $VERSION_DESCRIPTION"
}

git_tag_and_push_version() {
    git tag "$VERSION"
    git push
    git push --tags
}

# ----------------- Main Script ----------------- #

print_title "Creating Release: $VERSION - $VERSION_DESCRIPTION"

if [[ -z $DRY_RUN ]]; then mkdir -p "$VERSION_STATS_DIR"; fi
notify_create "$VERSION_STATS_DIR"

if [[ -z $DRY_RUN ]]; then check_and_start_docker; fi

if [[ -z $DRY_RUN ]]; then run_coverage_report; fi
notify_create "$VERSION_STATS_DIR/coverage.txt"
notify_create "$VERSION_STATS_DIR/coverage.json"
notify_create "$VERSION_STATS_DIR/coverage_html/"

if [[ -z $DRY_RUN ]]; then tokei_lines_of_code_report; fi
notify_create "$VERSION_STATS_DIR/lines_of_code.txt"
notify_create "$VERSION_STATS_DIR/lines_of_code.json"

if [[ -z $DRY_RUN ]]; then wily_code_complexity_report; fi
notify_create "$VERSION_STATS_DIR/complexity.txt"

if [[ -z $DRY_RUN ]]; then update_poetry_version; fi
notify_update "pyproject.toml $CURRENT_VERSION" "$SEMVER"

if [[ -z $DRY_RUN ]]; then update_project_version; fi
notify_update "$PROJECT/__init__.py $CURRENT_VERSION" "$SEMVER"

if [[ -z $DRY_RUN ]]; then
    git add -A

    # echo "$(blue "Pre-commit: ") Running..."
    # pre-commit run

    git commit -m "release: $VERSION - $VERSION_DESCRIPTION"
fi
notify_create "Create Git commit: 'release: $VERSION - $VERSION_DESCRIPTION'"

if [[ -z $DRY_RUN ]]; then git_tag_and_push_version; fi
notify_create "Git Tag: $VERSION"
echo "$(blue "Push: ") Push changes to Github"

if [[ -z $DRY_RUN ]]; then poetry install; fi
notify_update "Reinstall project locally: $CURRENT_VERSION" "$SEMVER"

print_title "Successfully Created Release: $VERSION - $VERSION_DESCRIPTION"
